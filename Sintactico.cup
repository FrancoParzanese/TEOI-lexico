package flex;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;


parser code
{:
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }

:}

action code
{:
:}


/*Declaracion de Terminales */
terminal ID, INT, FLOAT, STRING, CONST_STRING, CONST_INT, CONST_FLOAT, IGUAL, OP_MAY, OP_IGUAL, OP_MEN, OP_MENIG, OP_MAYIG, OP_DIS, OP_SUMA, OP_RES, OP_MUL, OP_DIV, AND, OR, COR_ABRE, COR_CIE,
PAR_ABRE, PAR_CIE, LLAV_ABRE, LLAV_CIE, DOSPUN_IG, COMA, DOSPUNTOS, DECLARE, ENDECLARE, BEGINPROGRAM, ENDPROGRAM, MIENTRAS, IF, ELSE, PRINT, LET, DEFAULT, DEFINE, ENDDEFINE;


/*Declaracion de No Terminales*/
non terminal prog, declaracion, programa, declaraciones, linea_declaracion, declaracion_var, tipo, bloque_sentencias, sentencia, asignacion, mientras, decisiones,
 salida, let, expresion, termino, factor, exp_logica, condicion, op, lista_let, termino_let;

start with prog;


prog ::= declaracion programa {: System.out.println("prog Regla 0 Compila correctamente llegando al simbolo start");:};

declaracion ::= DEFINE declaraciones ENDDEFINE {:System.out.println("Regla 1 --> Declaración"); :};

declaraciones ::= linea_declaracion {:System.out.println("Regla 2 --> Linea de declaración"); :}
		 | declaraciones linea_declaracion {:System.out.println("Regla 3 --> Declaraciones"); :};

linea_declaracion ::= COR_ABRE declaracion_var COR_CIE {:System.out.println("Regla 4 --> Declaración variables"); :};

declaracion_var::= ID COR_CIE DOSPUN_IG COR_ABRE tipo {:System.out.println("Regla 5 --> Id ] := [ tipo"); :}
  | ID COMA declaracion_var COMA tipo {:System.out.println("Regla 6 --> Id declaración variables tipo"); :};

tipo ::= FLOAT {:System.out.println("Regla 7 --> Float"); :}
	| INT {:System.out.println("Regla 8 --> Integer"); :}
	| STRING {:System.out.println("Regla 9 --> String"); :};

programa ::= BEGINPROGRAM bloque_sentencias ENDPROGRAM {:System.out.println("Regla 10 --> Begin bloque de sentencias End"); :};

bloque_sentencias ::= sentencia {:System.out.println("Regla 11 --> Sentencia"); :} 
		   | bloque_sentencias sentencia {:System.out.println("Regla 12 --> Bloque de sentencias"); :};

sentencia ::= asignacion {:System.out.println("Regla 13 --> Asignación"); :}
	| mientras {:System.out.println("Regla 14 --> Mientras"); :}
	| decisiones {:System.out.println("Regla 15 --> Decisiones"); :} 
	| salida {:System.out.println("Regla 16 --> Salida"); :}
	| let {:System.out.println("Regla 17 --> Let"); :};

asignacion ::= ID IGUAL expresion {:System.out.println("Regla 18 --> Id = Expresión"); :}
	|ID IGUAL CONST_STRING {:System.out.println("Regla 19 --> Id = constante"); :};

expresion ::= expresion OP_SUMA termino {:System.out.println("Regla 20 --> E+T"); :}
    	|expresion OP_RES termino {:System.out.println("Regla 21 --> E-T"); :}
	|termino {:System.out.println("Regla 22 --> Término"); :};

termino ::= termino OP_MUL factor {:System.out.println("Regla 23 --> T*F"); :}
	|termino OP_DIV factor {:System.out.println("Regla 24 --> T/F"); :}
	|factor:f {:System.out.println("Regla 25 --> factor valor = " + f); :};

factor ::= CONST_INT :ent {:System.out.println("Regla 26 --> Constante entera = " + ent); RESULT = ent; :}
	| CONST_FLOAT {:System.out.println("Regla 27 --> Constante Float"); :} 
	| ID :id {:System.out.println("Regla 28 --> Variable= " + id); RESULT = id; :}
	|PAR_ABRE expresion PAR_CIE {:System.out.println("Regla 29 --> (Expresión)"); :};

mientras ::= MIENTRAS exp_logica LLAV_ABRE bloque_sentencias LLAV_CIE {:System.out.println("Regla 30 --> Mientras expresión lógica {bloque}"); :};

exp_logica ::= condicion {:System.out.println("Regla 31 --> Condición"); :}
	| condicion AND condicion {:System.out.println("Regla 32 --> Condición and condición"); :}
	| condicion OR condicion {:System.out.println("Regla 33 --> Condición or condición"); :};

condicion ::= expresion op expresion {:System.out.println("Regla 34 --> E operador E"); :};

op::= OP_MAY {:System.out.println("Regla 35 --> Operador mayor"); :}
	| OP_MEN {:System.out.println("Regla 36 --> Operador menor"); :}
	| OP_IGUAL {:System.out.println("Regla 37 --> Operador igual"); :}
	| OP_MENIG {:System.out.println("Regla 38 --> Operador menor igual"); :}
	| OP_MAYIG {:System.out.println("Regla 39 --> Operador mayor igual"); :}
	| OP_DIS {:System.out.println("Regla 40 --> Operador distinto"); :};

decisiones ::= IF exp_logica LLAV_ABRE bloque_sentencias LLAV_CIE {:System.out.println("Regla 41 --> If expresión lógica {bloque}"); :}
	|IF exp_logica LLAV_ABRE bloque_sentencias LLAV_CIE ELSE LLAV_ABRE bloque_sentencias LLAV_CIE {:System.out.println("Regla 42 --> If expresión lógica {bloque} else {bloque} "); :};

salida::= PRINT CONST_STRING {:System.out.println("Regla 43 --> Print constante"); :};

let ::= LET lista_let DEFAULT expresion {:System.out.println("Regla 44 --> Let lista let Default expresion"); :};

lista_let::= termino_let {:System.out.println("Regla 45 --> Término let"); :} 
	| lista_let COMA termino_let {:System.out.println("Regla 46 --> Lista let, término let "); :};

termino_let ::= ID :id {:System.out.println("Regla 47 --> Variable= " + id); RESULT = id; :} 
	| ID DOSPUNTOS expresion {:System.out.println("Regla 48 --> Id: expresión"); :};